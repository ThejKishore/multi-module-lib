# Multi-stage build with jlink to reduce runtime image size
# Stage 1: Build application using Gradle Wrapper and produce fat jar
FROM eclipse-temurin:21-jdk-jammy AS build
WORKDIR /src
# Avoid Gradle native file watcher (can segfault on musl/alpine) and disable daemon
ENV GRADLE_OPTS="-Dorg.gradle.vfs.watch=false" \
    GRADLE_USER_HOME=/root/.gradle
# Cache dependencies
COPY build.gradle.kts gradle.properties settings.gradle ./
COPY gradle gradle
COPY gradlew ./
RUN chmod +x gradlew && ./gradlew --no-daemon dependencies || true
# Copy sources
COPY src src
COPY conf conf
# Build shadow jar
RUN ./gradlew --no-daemon clean shadowJar

# Stage 2: Analyze modules and create custom JRE with jlink
FROM eclipse-temurin:21-jdk-jammy AS jre-builder
WORKDIR /work
# Copy built jar from previous stage
COPY --from=build /src/build/libs/*-all.jar app.jar
# Use jdeps to compute required modules.
# Keep TLS crypto (jdk.crypto.ec). Avoid including full locale data to reduce size.
RUN jdeps \
    --multi-release 21 \
    --print-module-deps \
    --ignore-missing-deps \
    app.jar > deps.txt && \
    echo "jdk.crypto.ec" > extras.txt && \
    MODS=$(cat deps.txt) && EXTRAS=$(tr -d '\n' < extras.txt) && \
    jlink \
      --add-modules ${MODS},${EXTRAS} \
      --no-header-files \
      --no-man-pages \
      --strip-debug \
      --compress=2 \
      --output /jre

# Stage 3: Ultra-minimal runtime image (distroless, glibc-compatible)
FROM gcr.io/distroless/base-debian12:nonroot AS runtime-base
ENV TZ=UTC
WORKDIR /app
# Copy minimal JRE built on jammy (glibc)
COPY --from=jre-builder /jre /opt/jre
ENV PATH=/opt/jre/bin:$PATH
# Copy application and configuration
COPY --from=build /src/build/libs/*-all.jar /app/app.jar
COPY conf /app/conf
# Ensure a writable tmp directory for Jooby
RUN ["/busybox/sh","-c","mkdir -p /app/tmp && chown -R 65532:65532 /app /opt/jre || true"]
EXPOSE 8080
USER 65532:65532
ENTRYPOINT ["java","-XX:+UseContainerSupport","-XX:MaxRAMPercentage=75.0","-jar","/app/app.jar"]
